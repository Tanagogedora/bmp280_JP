{"entries":[{"timestamp":1743568896449,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"/**\n * makecode BMP280 digital pressure and temperature sensor package.\n * \n * Based on original BME280 work from the MicroPython Chinese community:\n * http://www.micropython.org.cn\n * \n * Original License: MIT  \n * Copyright (c) 2018, microbit/micropython Chinese community\n * \n * Ported and modified for BMP280 and MakeCode by Tanagotti, 2025\n * \n * (Note: The original BMP280 code from the same community was reviewed,\n * but not used directly due to functional issues.)\n */\n\n/**\n * This package supports the BMP280 digital pressure and temperature sensor module for micro:bit MakeCode.\n * It allows you to measure atmospheric pressure and temperature.\n * Please see the README for detailed data such as measurement range.\n *\n * マイクロビット MakeCode 用 BMP280 デジタル気圧・気温センサーモジュール対応パッケージです。\n * 気圧および気温を測定できます。\n * 測定範囲など詳細なデータはREADMEをご覧ください。\n*/\n\n/**\n* BMP280 block\n* \n* This namespace provides functions for interacting with the BMP280 digital pressure and temperature sensor.\n* It includes functions to read temperature and pressure, control power modes, and configure the I2C address.\n* \n* BMP280 センサー用のブロック群です。\n* 気温・気圧の取得や電源制御などを行います。\n*/\n\nnamespace BMP280 {\n\n    // Specify the type and color of the block icon / ブロックアイコンの種類と色を指定\n    //% weight=100 color=#70c0f0 icon=\"\\uf042\" block=\"BMP280\"\n\n    //Enum Definitions / 列挙型の定義\n\n    //I2C address/I2Cアドレス\n    export enum BMP280_I2C_ADDRESS {\n        //Address selection: 0x76 or 0x77 / アドレスの選択：0x76 または 0x77\n        //% block=\"0x76\" \n        ADDR_0x76 = 0x76,\n        //% block=\"0x77\"\n        ADDR_0x77 = 0x77\n    }\n    //Temperature Unit / 気温の単位\n    // Temperature units: C (Celsius) or F (Fahrenheit) / 温度単位：C（摂氏）または F（華氏）\n    export enum BMP280_T {\n        //% block=\"C\"\n        T_C = 0,\n        //% block=\"F\"\n        T_F = 1\n    }\n    // Pressure Unit / 気圧の単位\n    // Pressure units: Pa or hPa / 単位：Pa（パスカル）または hPa（ヘクトパスカル）\n    export enum BMP280_P {\n        //% block=\"Pa\"\n        Pa = 0,\n        //% block=\"hPa\"\n        hPa = 1\n    }\n\n    // Global variables: Corrected temperature and pressure  (units: T=℃, P=Pa)\n    // グローバル変数：補正後の気温と気圧（単位：T=℃、P=Pa）\n    let T = 0;\n    let P = 0;\n\n    // Default I2C address: 0x77 / デフォルトの I2C アドレス：0x77\n    let BMP280_I2C_ADDR = BMP280_I2C_ADDRESS.ADDR_0x77;\n\n    // Defining Functions / 関数の定義\n    /** \n     * Functions \"Access to BMP280 Registers\"\n     * BMP280のレジスタへのアクセスを行う関数群\n     * A set of functions for reading from and writing to BMP280\n     * registers via I2C communication.\n     * I2C 通信を用いて、各種レジスタへの読み書きを行う\n     */\n\n    /**\n     * Function \"Writes 1 byte from a register of the BMP280\".\n     * BMP280のレジスタに1バイトのデータを書き込む関数\n     *\n     * @param reg Register address (integer) / レジストリアドレス（整数値）\n     * @returns dat write (integer) / 書き込んだ値（整数値）\n     * @returns None/戻り値はない\n     *\n     * Creates a 2-byte buffer: the first byte is the register address (buf[0]),\n     * the second byte is the data to write (buf[1]), and sends it via I2C.\n     * レジスタアドレス（buf[0]）と書き込むデータ（buf[1]）を格納した2バイトのバッファを作成し、\n     * I2C を使ってデバイスに送信する。\n     */\n\n    function setreg(reg: number, dat: number): void {\n        let buf = pins.createBuffer(2);\n        buf[0] = reg;\n        buf[1] = dat;\n        pins.i2cWriteBuffer(BMP280_I2C_ADDR, buf);\n    }\n\n    /**\n     * Function \"Reads 1 byte from a register of the BMP280\".\n     * BMP280の任意のレジスタから 1 バイトの値を読み取る関数。\n     *\n     * @param reg Register address (integer) / レジストリアドレス（整数値）\n     * @returns Value read (integer) / 読み取った値（整数値）\n     *\n     * Sends the register address via I2C using UInt8BE format,\n     * then reads 1 byte from the device.\n     * レジストリアドレスを UInt8BE 形式で送信し、1 バイトを読み取って返します。\n     */\n\n    function getreg(reg: number): number {\n        pins.i2cWriteNumber(BMP280_I2C_ADDR, reg, NumberFormat.UInt8BE);\n        return pins.i2cReadNumber(BMP280_I2C_ADDR, NumberFormat.UInt8BE);\n    }\n\n    /**\n     * Function \"Reads a 16-bit unsigned integer\".\n     * 16 ビットの符号なし整数を読み取る関数。\n     *\n     * Used for calibration parameters such as dig_T1, dig_P1, etc.\n     * dig_T1、dig_P1 などの補正パラメータ用に使用します。\n     *\n     * @param reg Register address / レジストリアドレス\n     * @returns Unsigned 16-bit integer / 符号なし 16 ビット整数\n         */\n    function getUInt16LE(reg: number): number {\n        pins.i2cWriteNumber(BMP280_I2C_ADDR, reg, NumberFormat.UInt8BE);\n        return pins.i2cReadNumber(BMP280_I2C_ADDR, NumberFormat.UInt16LE);\n    }\n\n    /**\n         * Function \"Reads a 16-bit signed integer\".\n         * 16 ビットの符号付き整数を読み取る関数。\n         * \n         * Used for calibration parameters such as dig_T2, dig_T3, dig_P2.\n         * dig_T2、dig_T3、dig_P2 などの補正パラメータ用に使用します。\n     *\n         * @param reg Register address / レジストリアドレス\n         * @returns Signed 16-bit integer / 符号付き 16 ビット整数\n         */\n    function getInt16LE(reg: number): number {\n        pins.i2cWriteNumber(BMP280_I2C_ADDR, reg, NumberFormat.UInt8BE);\n        return pins.i2cReadNumber(BMP280_I2C_ADDR, NumberFormat.Int16LE);\n    }\n    // Function \"Get Tempratuer and Pressuer\".\n    // 気温と気圧取得の関数\n    /**\n         * BMP280 calibration parameters for temperature and pressure.\n         * BMP280 の温度・気圧補正用キャリブレーションパラメータ。\n         * \n         * Address range: 0x88 to 0x9F (factory-programmed values)\n         * アドレス範囲：0x88〜0x9F（工場出荷時に書き込まれた補正値）\n         * \n         * Common to BMP280 & BME280 sensors (excluding humidity-related registers)\n         * BMP280・BME280 センサーで共通（湿度関連のレジスタは除く）\n         */\n    // Set \"BMP280 calibration parameter registers\"\n    // BMP280温度・気圧補正用キャリブレーションパラメータのレジストリ　\n    // dig_T1 to dig_T3: temperature/気温補正\n    // dig_P1 to dig_P9: pressuere/気圧補正\n    let dig_T1 = getUInt16LE(0x88);\n    let dig_T2 = getInt16LE(0x8A);\n    let dig_T3 = getInt16LE(0x8C);\n    let dig_P1 = getUInt16LE(0x8E);\n    let dig_P2 = getInt16LE(0x90);\n    let dig_P3 = getInt16LE(0x92);\n    let dig_P4 = getInt16LE(0x94);\n    let dig_P5 = getInt16LE(0x96);\n    let dig_P6 = getInt16LE(0x98);\n    let dig_P7 = getInt16LE(0x9A);\n    let dig_P8 = getInt16LE(0x9C);\n    let dig_P9 = getInt16LE(0x9E);\n\n    /**\n         *  Temperature and pressure measurement settings\n         *  Temperature x 1, pressure x 4, Normal mode\n         *  気温・気圧の測定設定\n         *  温度×1、気圧×4、Normal mode\n         */\n    setreg(0xF4, 0x2F);\n\n    /** IIR filter settings\n         * IIR filter coefficient = 4, standby time = 0.5 ms\n         * IIR フィルターの設定\n     * IIR フィルタ係数 = 4、スタンバイ時間 = 0.5ms\n         */\n    setreg(0xF5, 0x0C);\n\n    /**\n        * Calculate Temperatuer and Pressure\n        * 気温・気圧の算出\n        * Reads raw data from the sensor and calculates corrected temperature and pressure.\n        * センサーから生データを読み取り、補正済みの気温と気圧を算出。\n        */\n    function get(): void {\n\n        // Calculate Temperatuer/気温の計算\n        // Read raw temperature data (20 bits)\n        // 温度の生データ（20ビット）読み取り\n        let adc_T = (getreg(0xFA) << 12) + (getreg(0xFB) << 4) + (getreg(0xFC) >> 4);\n\n        // Temperature compensation calculation\n        // 温度補正の計算\n        let var1 = (((adc_T >> 3) - (dig_T1 << 1)) * dig_T2) >> 11;\n        let var2 = (((((adc_T >> 4) - dig_T1) * ((adc_T >> 4) - dig_T1)) >> 12) * dig_T3) >> 14;\n        let t_fine = var1 + var2;\n        let temp = t_fine as number;\n\n        // Calculate corrected temperature, rounded to 2 decimal places\n        // 補正後の気温を計算（小数第2位で四捨五入）\n        T = Math.round(((temp * 5 + 128) / 256.0) / 100.0 * 100) / 100;\n\n        // Calculate Pressure/気圧の計算\n        // Read raw pressure data (20 bits)\n        // 気圧の生データ（20ビット）読み取り\n        let adc_P = (getreg(0xF7) << 12) + (getreg(0xF8) << 4) + (getreg(0xF9) >> 4);\n\n        // Pressure compensation calculation\n        // 気圧補正の計算\n        var1 = (t_fine >> 1) - 64000;\n        var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;\n        var2 = var2 + ((var1 * dig_P5) << 1);\n        var2 = (var2 >> 2) + (dig_P4 << 16);\n        var1 = (((dig_P3 * ((var1 >> 2) * (var1 >> 2)) >> 13) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;\n        var1 = ((32768 + var1) * dig_P1) >> 15;\n\n        if (var1 == 0) {\n            return; // Prevent division by zero / 0除算防止\n        }\n        let _p = ((1048576 - adc_P) - (var2 >> 12)) * 3125;\n        // Round to 0.01 Pa/小数点第２位を四捨五入し0.1Paまで求める。\n        _p = Math.round((_p / var1) * 2 * 100) / 100;\n        var1 = (dig_P9 * (((_p >> 3) * (_p >> 3)) >> 13)) >> 12;\n        var2 = (((_p >> 2)) * dig_P8) >> 13;\n        P = _p + ((var1 + var2 + dig_P7) >> 4);\n    }\n\n    /**\n        *  Get pressure value from BMP280 sensor\n        *  BMP280 センサーから気圧を取得します\n        * \n        *  @param u Pressure unit (Pa or hPa) / 気圧の単位（Pa または hPa）\n        *  @returns Pressure value / 気圧の値（単位に応じた小数第1位）\n        */\n    //% blockId=\"BMP280_GET_PRESSURE\"\n    //% block=\"Pressuer/気圧 %u\"\n    //% weight=80 blockGap=8\n    export function pressure(u: BMP280_P): number {\n        get();\n        if (u == BMP280_P.Pa) {\n            // Pa:Round to the first decimal place/小数第1位で四捨五入\n            return Math.round(P * 10) / 10;\n        }\n        else {\n            // hPa:Round to the second decimal place/小数第2位で四捨五入\n            return Math.round((P / 100) * 10) / 10;\n        }\n    }\n\n    /**\n        * Get temperature value from BMP280 sensor\n        * BMP280 センサーから気温を取得します\n        *\n        * @param u Temperature unit (C or F) / 温度の単位（C または F）\n        * @returns Temperature value / 気温の値（単位に応じた小数第1位）\n        */\n    //% blockId=\"BMP280_GET_TEMPERATURE\"\n    //% block=\"Tempratuere/気温 %u\"\n    //% weight=80 blockGap=8\n    export function temperature(u: BMP280_T): number {\n        get();\n        if (u == BMP280_T.T_C) {  //Celsius degree/摂氏\n            return T;\n        } else {\n            //Fahrenheit degree/華氏\t\n            let TF = T * 9 / 5 + 32;\n            return Math.round(TF * 10) / 10;\n        }\n    }\n    //Sensor power control (Power ON and OFF)\n    //センサーの電源管理（起動と停止）\n    /**\n     * Power On\n     * 起動\n     */\n    //% blockId=\"BME280_POWER_ON\"\n    //% block=\"Power On Sensor /センサー起動\"\n    //% weight=22 blockGap=8\n    export function PowerOn() {\n        setreg(0xF4, 0x2F)\n    }\n\n    /**\n     * Power OFF\n     * センサー停止\n    */\n    //% blockId=\"BME280_POWER_OFF\"\n    //% block=\"Power OFF Sensor/センサー停止\"\n    //% weight=21 blockGap=8\n    export function PowerOff() {\n        setreg(0xF4, 0)\n    }\n\n    /**\n     * Event Block\n     * イベントブロック\n     */\n\n    /**\n        * Triggered when pressure is Lower than a specified value.\n        * 気圧が指定値より低い場合\n        *\n        * @param dat Threshold value / しきい値（Pa）\n        * @param body Action to perform / 実行する処理\n        */\n    //% block=\"Pressuer / 気圧 <  %dat\" dat.defl=100000\n    export function PressureBelowThan(dat: number, body: () => void): void {\n        control.inBackground(function () {\n            while (true) {\n                get()\n                if (P < dat) {\n                    body()\n                }\n                basic.pause(1000)\n            }\n        })\n    }\n\n    /**\n        * Triggered when pressure is Higher than a specified value.\n        * 気圧が指定値より高い場合\n        *\n        * @param dat Threshold value / しきい値（Pa）\n        * @param body Action to perform / 実行する処理\n        */\n    //% block=\"Pressuer / 気圧 > %dat\" dat.defl=100000\n    export function PressureHigherThan(dat: number, body: () => void): void {\n        control.inBackground(function () {\n            while (true) {\n                get()\n                if (P > dat) {\n                    body()\n                }\n                basic.pause(1000)\n            }\n        })\n    }\n\n    /**\n        * Triggered when pressure is Lower than a specified value.\n        * 気温が指定値より低い場合\n        *\n        * @param dat Threshold value / しきい値（C）\n        * @param body Action to perform / 実行する処理\n        */\n    //% block=\"Temperature / 気温 < %dat\" dat.defl=10\n    export function TemperatureBelowThan(dat: number, body: () => void): void {\n        control.inBackground(function () {\n            while (true) {\n                get()\n                if (T < dat) {\n                    body()\n                }\n                basic.pause(1000)\n            }\n        })\n    }\n    /**\n        * Triggered when pressure is Lower than a specified value.\n        * 気温が指定値より低い場合\n        *\n        * @param dat Threshold value / しきい値（C）\n        * @param body Action to perform / 実行する処理\n        */\n    //% block=\"Temperature / 気温 > %dat\" dat.defl=30\n    export function TemperatureHigherThan(dat: number, body: () => void): void {\n        control.inBackground(function () {\n            while (true) {\n                get()\n                if (T > dat) {\n                    body()\n                }\n                basic.pause(1000)\n            }\n        })\n    }\n\n    /**\n        * Set the I2C address of the BMP280 sensor.\n        * BMP280 の I2C アドレスを設定\n        * \n        *  @param addr I2C address to set / 設定する I2C アドレス\n        */\n    //% blockId=\"BME280_SET_ADDRESS\"\n    //% block=\"I2C Address/I2Cアドレス %addr\"\n    //% weight=20 blockGap=8\n    export function Address(addr: BMP280_I2C_ADDRESS) {\n        BMP280_I2C_ADDR = addr\n    }\n}"],[1,"\n"]],"start1":0,"start2":0,"length1":12900,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":238,"start2":238,"length1":32,"length2":31}]}]},{"timestamp":1743569427235,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":114}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":233,"start2":233,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// テストはここに来ます。このパッケージが拡張機能として使用されるときにはコンパイルされません。\n"}]}],"snapshots":[{"timestamp":1743568896448,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"bmp280betaVrJp\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1743569583865}